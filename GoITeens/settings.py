"""
Django settings for GoITeens project.

Generated by 'django-admin startproject' using Django 5.1.5.
"""

import os
from pathlib import Path
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure--jdg2)njm4+pl_35yfwv-xtv#_!-uy+q!w2tu0^xx*00ixcq6='


DEBUG = False

ALLOWED_HOSTS = ['dnkshrr.pythonanywhere.com', '*']  # Для локального сервера

# Application definition
INSTALLED_APPS = [
    'courses',
    'market',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.staticfiles',
    'example2',
    'user_permission',
    'example4',
    'sygma',
    'mails',
    'ajax_demo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GoITeens.urls'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GoITeens.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'  # Исправлено с 'css/' на стандартный путь
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Путь, куда будут собираться статические файлы
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'staticfiles')]  # Папка для ваших собственных статических файлов

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_AGE = 600
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'maks3010dan@gmail.com'
EMAIL_HOST_PASSWORD = 'tuui hzrx kapl gpxl'
DEFAULT_FROM_EMAIL = 'maks3010dan@gmail.com'
ADMINS = [('Max', 'maks3010dan@gmail.com')]

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'

# Caching
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
        "TIMEOUT": 60,
        "OPTIONS": {"MAX_ENTRIES": 1000},
    }
}

DATABASE_ROUTERS = ['GoITeens.routers.CacheRouter']

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {'class': 'logging.StreamHandler', 'level': 'INFO'},
        'mail_admins': {'class': 'django.utils.log.AdminEmailHandler', 'level': 'INFO', 'include_html': True},
    },
    'loggers': {
        'mails': {'handlers': ['console', 'mail_admins'], 'level': 'INFO', 'propagate': True},
    },
}

logging.config.dictConfig(LOGGING)
logging.warning("Logging configured")

SERVER_EMAIL = EMAIL_HOST_USER